<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<!-- This mapping file highlights the usage entity-name, multiple mappings 
	for same model -->
<hibernate-mapping schema="test">

	<class name="com.sample.model.Order" table="ORDER_INVOICE"
		entity-name="CustomOrderEntity">
		<id name="orderId" column="ID">
			<generator class="native"></generator>
		</id>

		<property name="orderStatus" column="ORDER_STATUS">
			<type name="org.hibernate.type.EnumType">
				<param name="enumClass">com.sample.model.OrderStatusEnum</param>
				<param name="type">12</param>
			</type>
		</property>

		<set name="lineItems" table="LINE_ITEM" lazy="true" cascade="save-update,delete">
			<key column="LINE_ORDER_ID" not-null="true" />
			<one-to-many entity-name="CustomLineItemEntity" />
		</set>

		<!-- Note: Code Observation. While defining entity-name mapping, it should 
			include all the many-to-one associations. Otherwise the count query would 
			fail for queries where the where clause refers to that association. Hibernate 
			code for some reason creates count(*) queries for each mapping and entity-name, 
			even if we do a count on main mapping file and not on entity. Refer to CriteriaQueryTest.testCriteriaQueryCountonEntity 
			as sample test for this. Comment out the many-to-one association below and 
			run that test case. It'd fail, even though we are doing count(*) on Order.class -->
		<many-to-one name="customer" class="com.sample.model.Customer"
			column="CUSTOMER_ID" cascade="none" />

	</class>
</hibernate-mapping>